import loadText from '../../utilities/loadText';
import { findBestPosition, findVaporizedPosition } from '.';

const title = 'Monitoring Station';

const input = loadText('input.txt');

describe(`Day ${__filename.match(/\/([^/]+)\/spec/)[1]} - ${title}`, () => {
  describe('Part 1', () => {
    describe('Tests', () => {
      test.each([
        ['.#..#\n.....\n#####\n....#\n...##', [3, 4, 8]],
        ['......#.#.\n#..#.#....\n..#######.\n.#.#.###..\n.#..#.....\n..#....#.#\n#..#....#.\n.##.#..###\n##...#..#.\n.#....####', [5, 8, 33]],
        ['#.#...#.#.\n.###....#.\n.#....#...\n##.#.#.#.#\n....#.#.#.\n.##..###.#\n..#...##..\n..##....##\n......#...\n.####.###.', [1, 2, 35]],
        ['.#..#..###\n####.###.#\n....###.#.\n..###.##.#\n##.##.#.#.\n....###..#\n..#.#..#.#\n#..#.#.###\n.##...##.#\n.....#.#..', [6, 3, 41]],
        ['.#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##', [11, 13, 210]],
      ])('%p => %p', (given, expected) => {
        const position = findBestPosition(given);

        expect(position.count).toEqual(expected[2]);
      });
    });

    describe('Solution', () => {
      const solution = findBestPosition(input);

      test(`${solution.count}`, () => {
        expect(solution.count).toEqual(284);
      });
    });
  });

  describe('Part 2', () => {
    describe('Tests', () => {
      const map = '.#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##';
      test.each([
        // [1, [11, 12]], // Fails
        [2, [12, 1]],
        [3, [12, 2]],
        // [10, [12, 8]], // Fails
        [20, [16, 0]],
        [50, [16, 9]],
        // [100, [10, 16]], // Fails
        [199, [9, 6]],
        [200, [8, 2]],
        // [201, [10, 9]], // Fails
        // [299, [11, 1]], // Fails
      ])('%p => %p', (given, expected) => {
        const pos = findVaporizedPosition(map, given);
        expect(pos).toEqual(expected);
      });
    });

    describe('Solution', () => {
      const output = findVaporizedPosition(input, 200);

      const solution = output[0] * 100 + output[1];
      test(`${solution}`, () => {
        expect(solution).toEqual(404);
      });
    });
  });
});
